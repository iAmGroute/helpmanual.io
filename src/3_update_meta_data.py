import re
from pathlib import Path

import yaml


class ManMetadata:
    def __init__(self):
        self.raw_man = Path('./raw/man')
        self.data = []
        for i in range(1, 9):
            dir = self.raw_man / 'man{}'.format(i)
            self.process_dir(dir)
            # break
        with Path('metadata.yml').open('w') as f:
            yaml.dump(self.data, stream=f, default_flow_style=False)

    def process_dir(self, p: Path):
        print('processing {}...'.format(p))
        for pp in p.iterdir():
            if pp.is_file():
                self.process_file(pp)

    def process_file(self, p: Path):
        last_dot = p.name.rfind('.')
        name = p.name[:last_dot]
        man_id = p.name[last_dot + 1:]
        description = revision_date = None
        extra1 = extra2 = extra3 = None
        head, man_comments = [], []
        in_description = False
        # print(p)
        with p.open() as f:
            prev_line = ''
            while len(head) < 200:
                try:
                    line = prev_line + next(f).strip()
                except StopIteration:
                    break
                prev_line = ''
                if not line:
                    continue
                elif line.startswith('.\\"'):
                    if not head:
                        # we only want the first comment
                        man_comments.append(line[3:])
                    continue
                elif line.startswith(('\'\\" ', '\\}', '\\{', '.if', '.  ')):
                    continue
                elif line.startswith("'br") or line.startswith('.br'):
                    prev_line = line[3:]
                    continue

                line = re.sub('^\\\& ', '', line)

                if line.startswith('.TH'):
                    th_line = line[4:].strip()
                    th_items = [v.strip('"') for v in re.findall('(".*?"|\w+)(?: |$)', th_line)]
                    if len(th_items) > 2:
                        th_items = th_items[2:]
                        try:
                            extra1 = th_items[0]
                            extra2 = th_items[1].strip('\ &')
                            extra3 = th_items[2].strip('\ &')
                        except IndexError:
                            pass
                if revision_date is None and line.startswith('.Dd'):
                    revision_date = line[4:]
                    revision_date = re.sub(r'\$Mdocdate:(.*)\$', r'\1', revision_date).strip(' ')

                if in_description:
                    if line.startswith('.'):
                        in_description = False
                    else:
                        description += line
                elif description is None and not line.startswith('.'):
                    description = line
                    in_description = True
                elif description is None and line.startswith('.Nd'):
                    description = line[4:]
                head.append(line)

        if description is None:
            if next((l for l in head if l.startswith('.so ')), None):
                return
            if len(head) < 2:
                return
            raise RuntimeError('no description for {}\n"{}"'.format(p, '\n'.join(head)))
        description = description.strip(' ')
        description = re.sub(r'\\s[\-0-9]+', '', description)
        description = description.replace('\\-', '-')
        if description.lower().startswith(name + ' '):
            description = description[len(name) + 1:]
        description = description.strip(' -,')
        data = dict(
            name=name,
            raw_path=str(p.relative_to(self.raw_man)),
            uri='/man/{}/{}'.format(man_id, name),
            description=description,
        )
        if revision_date:
            data['revision_date'] = revision_date

        man_comments = (
            '\n'.join(man_comments)
            .replace('\"', '"')
            .replace('\r\n', '\n')
            .replace('-*- nroff -*-', '')
            .strip('\n"')
        )
        if len(man_comments) > 400:
            man_comments = man_comments[:399] + 'â€¦'

        if '\n' not in man_comments:
            man_comments = man_comments.strip(' ')

        auto_gen = ' Automatically generated by Pod', 'DO NOT MODIFY THIS FILE! ', 'auto-generated by docbook2man'
        if man_comments.startswith(auto_gen):
            man_comments = ''
        extra = dict(extra1=extra1, extra2=extra2, extra3=extra3, man_comments=man_comments,
                     doc_date=revision_date)
        extra = {k: v for k, v in extra.items() if v}
        if extra:
            data['extra'] = extra
        self.data.append(data)


if __name__ == '__main__':
    ManMetadata()

